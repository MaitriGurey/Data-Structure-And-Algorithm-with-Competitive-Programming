Given a string str of length N, you have to find number of palindromic subsequence (need not necessarily be distinct) which could be formed from the string str.
Note: You have to return the answer module 109+7;
 
Example 1:-
Input:- 
Str = "abcd"
Output:- 
4
Explanation:
palindromic subsequence are : "a" ,"b", "c" ,"d"
 
Example 2:-
Input: 
Str = "aab"
Output: 
4
Explanation:
palindromic subsequence are :"a", "a", "b", "aa"

//SOURCE CODE-

#include<bits/stdc++.h>
using namespace std;
class Solution{
    public:
    /*You are required to complete below method */
    int countPS(string s)
    {
      long long int mod = 1e9+7;
      int len = s.length();
      int memo[n][n];
      for(int g = 0; g <len; g++)
      {
         for(int j = g, i = 0; j <len; i++, j++)
         {
               if(g == 0)
               {
                   memo[i][j] = 1;
               }
               else if(g == 1)
               {
                   if(s[i] == s[j]) 
                        memo[i][j] = 3;
                   else 
                        memo[i][j] = 2;
              }
             else if(s[i] == s[j]) 
             {
               memo[i][j] = (memo[i][j-1]+ memo[i+1][j] + 1) % mod;
            }
           else
           {
               long long ans = (memo[i][j-1] + memo[i+1][j])%mod;
               long long bns = memo[i+1][j-1];
               memo[i][j] = ((ans - bns) % mod + mod) % mod;
           }
       }
    }
    return memo[0][len-1];
  }
};
// Driver program
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string str;
        cin>>str;
        Solution ob;
        long long int ans = ob.countPS(str);
        cout<<ans<<endl;
    } 
}
