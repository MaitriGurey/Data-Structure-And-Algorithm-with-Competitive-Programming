//LONGEST COMMON SUBSEQUENCE-
Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0

//SOURCE CODE-

//1ST DP APPROACH 
//TOP DOWN APPROACH
#include<bits/stdc++.h>
using namespace std;
int memo[10001][10001];
int LCS(string str1,string str2,int m,int n)
{
  if(memo[m+1][n+1]!=-1)
  {
    return memo[m][n];
  }
  if(m==0||n==0)
      memo[m][n]=0;
  else
  {
    if(str1[m-1]==str2[n-1])
       memo[m][n]=1+LCS(str1,str2,m-1,n-1);
    else
       memo[m][n]=max(LCS(str1,str2,m-1,n),LCS(str1,str2,m,n-1);
  }
  return memo[m][n];
}
int main()
{
  string str1,str2;
  cin>>str1,str2;
  int len1=str1.length();
  int len2=str2.length();
  memset(memo,-1,sizeof(memo));
  cout<<LCS(str1,str2,len1,len2);
  return 0;
}

//2ND DP APPROACH
//BOTTOM UP APPROACH
#include<bits/stdc++.h>
using namespace std;
int LCS(string str1,str2)
{
  int m=str1.length();
  int n=str2.length();
  int memo[m+1][n+1];
  for(int i=0;i<m+1;i++)
  {
    for(int j=0;j<n+1;j++)
    {
      if(i==0||j==0)
         memo[i][j]=0;
    }
  }
  for(int i=1;i<m+1;i++)
  {
    for(int j=1;j<n+1;j++)
    {
      if(str1[i-1]==str2[i-1])
         memo[i][j]=1+memo[i-1][j-1];
      else
         memo[i][j]=max(memo[i-1][j],memo[i][j-1]);
     }
   }
   return memo[m][n];
}
int main()
{
 string s1,s2;
 cin>>s1>>s2;
 cout<<LCS(s1,s2);
 return 0;
}

 
 
       
  
