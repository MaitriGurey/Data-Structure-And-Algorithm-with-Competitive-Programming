//PROBLEM STATEMENT-

Given a non-negative integer S represented as a string, remove K digits from the number so that the new number is the smallest possible.
Note : The given num does not contain any leading zero.

Example 1:-
Input:-
S = "149811", K = 3
Output:- 111
Explanation: Remove the three digits 
4, 9, and 8 to form the new number 
111 which is the smallest.

Example 2:-
Input:-
S = "1002991", K = 3
Output:-21
Explanation: Remove the three digits
1(leading one), 9, and 9 to form the 
new number 21(Note that the output 
must not contain leading zeroes) 
which is the smallest.

SOURCE CODE-
//1st code-
class Solution{
    public:
    string removeKdigits(string num, int k) {
        int n = num.length();
        stack<int> st;
        for(int i=0;i<n;i++){
            if(st.empty() || k==0 || num[st.top()]<num[i])
                st.push(i);
            else{
                while(!st.empty() && k>0 && num[st.top()]>num[i]){
                    st.pop();
                    k--;
                }
                st.push(i);
            }
        }
        while(!st.empty() && k>0){
            st.pop();
            k--;
        }
        string output = "";
        while(!st.empty()){
            output+=num[st.top()];
            st.pop();
        }
        reverse(output.begin(),output.end());
        int startzero = 0;
        while(output[startzero]=='0')
            startzero++;
        if(output.substr(startzero)=="")
            return "0";
        else
            return output.substr(startzero);
    }
};

//2nd code-

class Solution {
public:
    string removeKdigits(string str, int k) {
        if(str.length() <= k)
            return "0";
        if(k == 0)
            return str;
        
        stack <char> rishu;
        
        rishu.push(str[0]);
        
        for(int i = 1; i<str.length(); i++){
            while(k>0 && !rishu.empty() && str[i]<rishu.top()){
                k--;
                rishu.pop();
            }
            rishu.push(str[i]);
            
			// We pop any preceeding zeroes
            if(rishu.size() == 1 && str[i] == '0')
                rishu.pop();
        }
        
		// For cases like "12345" where every str[i] > s.top()
        while(k && !rishu.empty()){
            k--;
            rishu.pop();
        }
        string res = "";
        while(!rishu.empty()){
            res.push_back(rishu.top());
            rishu.pop();
        }
        
        reverse(res.begin(), res.end());
        if(res.size() == 0)
            return "0";
        else
            return res;
    }
};
