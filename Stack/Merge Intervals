//SOME GOOD QUESTIONS IN STACK
//THIS QUESTION IS DONE USING STACK WITH O(NLOGN) TIME COMPLEXITY AND O(N) SPACE COMPLEXITY
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

//SOURCE CODE-
=>
#include<bits/stdc++.h>
using namespace std;
int main()
{
  int n;
  cin>>n;
  vector<pair<int,int>>arr;
  for(int i=0;i<n;i++)
  {
    int x,y;
    cin>>x>>y;
    arr.push_back({x,y});
  }
  sort(arr.begin(),arr.end());
  stack<pair<int,int>>s;
  s.push({a[0].first,a[0].second});
  for(int i=1;i<n;i++)
  {
    int start1=s.top().first;
    int end1=s.top().second;
    int start2=arr[i].first;
    int end2=arr[i].second;
    if(end1<start2)
       s.push({start2,end2});
    else
    {
      s.pop();
      end1=max(end1,end2);
      s.push({start1,ende1});
    }
    while(!s.empty())
    {
      cout<<s.top().first<<" "<<s.top().second<<"\n";
      s.pop();
    }
  }
  return 0;
}  
  
