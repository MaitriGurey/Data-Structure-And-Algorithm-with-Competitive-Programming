//PROBLEM STATEMENT-

Find the largest rectangular area possible in a given histogram where the largest rectangle can be made of a number of contiguous bars. For simplicity, assume that all bars have same width and the width is 1 unit.

For example-
consider the following histogram with 7 bars of heights {6, 2, 5, 4, 5, 1, 6}. 
The largest possible rectangle possible is 12

//SOURCE CODE-

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;
ll getMaxArea(ll arr[],ll n)
{
   stack <pair<ll ,ll > > s;
  
    vector <ll >left;
    vector <ll > right;
    ll i;
    for( i =0;i<n;i++)
    {
        if(s.size() == 0)
            left.push_back(-1);
        else if(s.size() > 0 && s.top().first < arr[i])
            left.push_back(s.top().second);
        else if(s.size() >0 && s.top().first >= arr[i])
        {
            while(s.size() > 0 && s.top().first >= arr[i])
            {
                s.pop();
                
            }
            if(s.size() == 0)
            {
                left.push_back(-1);
            }
            else
                left.push_back(s.top().second);
        }
        s.push({arr[i],i});
    }
    /*while(s.size() >0)
    {
        s.pop();
    }*/
    for(i =n-1;i>=0;i--)
    {
        if(s.size() == 0)
            right.push_back(n);
        else if(s.size() > 0 && s.top().first <  arr[i])
            right.push_back(s.top().second);
        else if(s.size() >0 && s.top().first >= arr[i])
        {
            while(s.size() > 0 && s.top().first >= arr[i])
            {
                s.pop();
                
            }
            if(s.size() == 0)
            {
                right.push_back(n);
            }
            else
                right.push_back(s.top().second);
        }
        s.push({arr[i],i});
    }
    
    reverse(right.begin(),right.end());
     
    ll maximum = 0; 
    for(i=0;i<left.size();i++)
    {
        right.at(i) = right.at(i) - left.at(i) -1;
        right.at(i) = right.at(i) * arr[i];
       maximum = max(maximum, right.at(i));
    }
   
    return maximum;
}
int main()
{
    ll n;
    cin>>n;
    ll arr[n];
    for(ll i=0;i<n;i++)
       cin>>arr[i];
    cout<<getMaxArea(arr,n);
    return 0;
}

