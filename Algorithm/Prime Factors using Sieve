//This is also one of the basic application of Sieve of Erathothenes to find prime factors in o(logn) Time complexity

#include <bits/stdc++.h>
using namespace std;
void primefactor(int n)
{
    int spf[n]={0};//This is array smallest prime factors with initially initialized with zero
    for(int i=2;i<=n;i++)//As Every Prime number's smallest prime factor will be prime number itself
        spf[i]=i;
    for(int i=2;i<=n;i++)//Traversing through array 
    {
        if(spf[i]==i)
        {
            for(int j=i*i;j<=n;j+=i)
            {
               if(spf[j]=j) 
                  spf[j]=i;
            }
        }
    }
    while(n!=1)//loop running time number becomes 1 and printing all prime factor of given number
    {
        cout<<spf[n]<<" ";
        n=n/spf[n];
    }
    
}
int main() 
{
	// your code goes here
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	int n;
	cin>>n;
	primefactor(n);
	
	return 0;
}
