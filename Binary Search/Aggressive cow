//PROBLEM STATEMENT-
Farmer John has built a new long barn, with N (2 <= N <= 100,000) stalls. The stalls are located along a straight line at positions x1,...,xN (0 <= xi <= 1,000,000,000).

His C (2 <= C <= N) cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, FJ wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?
Input
t â€“ the number of test cases, then t test cases follows.
* Line 1: Two space-separated integers: N and C
* Lines 2..N+1: Line i+1 contains an integer stall location, xi
Output
For each test case output one integer: the largest minimum distance.
Example
Input:

1
5 3
1
2
8
4
9
Output:
3

Output details:-
FJ can put his 3 cows in the stalls at positions 1, 4 and 8,
resulting in a minimum distance of 3.

//SOURCE CODE-
#include<bits/stdc++.h>
using namespace std;

int main() 
{
	// your code goes here
	int t;
	cin>>t;
	while(t--){
	//n is number of stalls and c is number of cows
	int n,c;
	cin>>n>>c;
	int arr[n];
	for(int i=0;i<n;i++)//Taking input of each and every stalls
	   cin>>arr[i];
	sort(arr,arr+n);//sort the stalls
	int lower=1;//setting up the lower bound
	int upper=1e9;//setting up the upper bound
	int result=0;//Required answer will be stored in it
	while(lower<=upper)
	{
		int mid=lower+(upper-lower)/2;
		int cow=1;//As initially always there will be count one
		int prev=arr[0];//Taking oth index stall or prev pointing to oth index stall
		for(int i=1;i<n;i++)//comparison starts from 2nd number stall
		{
			if(arr[i]-prev>=mid)//if this hold means we put cow there
			{
				cow++;
				prev=arr[i];//updating the stall number
                if(c==cow)//if number of cows becomes equal to updated value of cow
                  break;
			}
		}
		if(cow==c)
		{
			result=mid;
			lower=mid+1;
		}
		else
		   upper=mid-1;
	}
	cout<<result<<"\n";
	}
	return 0;
}
