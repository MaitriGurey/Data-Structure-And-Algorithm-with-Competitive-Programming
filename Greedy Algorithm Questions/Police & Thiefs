//PROBLEM STATEMENT-
Given an array of size n such that each element contains either a 'P' for policeman or a 'T' for thief. Find the maximum number of thieves that can be caught by the police. 
Keep in mind the following conditions :

Each policeman can catch only one thief.
A policeman cannot catch a thief who is more than K units away from him.
Example 1:

Input:
N = 5, K = 1
arr[] = {P, T, T, P, T}
Output: 2
Explanation: Maximum 2 thieves can be 
caught. First policeman catches first thief 
and second police man can catch either second 
or third thief.

//SOURCE CODE-
class Solution{
    public:
    int catchThieves(char arr[], int n, int k) 
    { 
    	int result = 0; 
    	vector<int> thief; 
    	vector<int> police; 
    
    	for (int i = 0; i < n; i++) { 
    		if (arr[i] == 'P') 
    			police.push_back(i); 
    		else if (arr[i] == 'T') 
    			thief.push_back(i); 
    	} 
    
    	// track lowest current indices of 
    	// thief: thi[l], police: pol[r] 
    	int l = 0, r = 0; 
    	while (l < thief.size() && r < police.size()) { 
    
    		// can be caught 
    		if (abs(thief[l] - police[r]) <= k) { 
    			result++; 
    			l++; 
    			r++; 
    		} 
    
    		// increment the minimum index 
    		else if (thief[l] < police[r]) 
    			l++; 
    		else
    			r++; 
    	} 
    	return result; 
    } 
};
