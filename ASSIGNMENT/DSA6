Question 1
Write a function to find the maximum element in the stack.
CODE=>
#include <bits/stdc++.h> 
using namespace std; 
struct MyStack { 
	stack<int> s; 
	int maxEle; 

	// Prints maximum element of MyStack 
	void getMax() 
	{ 
		if (s.empty()) 
			cout << "Stack is empty\n";  
		else
			cout << "Maximum Element in the stack is: "<< maxEle << "\n"; 
	} 

	// Prints top element of MyStack 
	void peek() 
	{ 
		if (s.empty()) { 
			cout << "Stack is empty "; 
			return; 
		} 

		int t = s.top(); // Top element. 

		cout << "Top Most Element is: "; 
		(t > maxEle) ? cout << maxEle : cout << t; 
	} 

	// Remove the top element from MyStack 
	void pop() 
	{ 
		if (s.empty()) { 
			cout << "Stack is empty\n"; 
			return; 
		} 

		cout << "Top Most Element Removed: "; 
		int t = s.top(); 
		s.pop(); 

		// Maximum will change as the maximum element 
		// of the stack is being removed. 
		if (t > maxEle) { 
			cout << maxEle << "\n"; 
			maxEle = 2 * maxEle - t; 
		} 

		else
			cout << t << "\n"; 
	} 

	// Removes top element from MyStack 
	void push(int x) 
	{ 
		// Insert new number into the stack 
		if (s.empty()) { 
			maxEle = x; 
			s.push(x); 
			cout << "Number Inserted: " << x << "\n"; 
			return; 
		} 
		if (x > maxEle) { 
			s.push(2 * x - maxEle); 
			maxEle = x; 
		} 

		else
			s.push(x); 

		cout << "Number Inserted: " << x << "\n"; 
	} 
}; 

Question 2
Write a function to find the minimum element in the stack.
CODE=>
#include<bits/stdc++.h>
#include <iostream>
#include <stack>
 
class Stack
{
    // main stack to store elements
    std::stack<int> s;
 
    // variable to store minimum element
    int min;
 
public:
 
    // Inserts a given element on top of the stack
    void push(int x)
    {
        if (s.empty()) {
            s.push(x);
            min = x;
        }
        else if (x > min) {
            s.push(x);
        }
        else {
            s.push(2 * x - min);
            min = x;
        }
    }
 
    // Removes top element from the stack and returns it
    void pop()
    {
        if (s.empty()) {
            std::cout << "Stack underflow!!" << '\n';
        }
 
        int top = s.top();
        if (top < min)
            min = 2 * min - top;
        s.pop();
    }
 
    // Returns the minimum element from the stack in constant time
    int minimum()
    {
        return min;
    }
};
