#include <bits/stdc++.h>
using namespace std;

const int n = 1e6 + 10;
bool prime[n];
int dp[n];
void sieve()
{
   memset(prime, true, sizeof(prime));
   prime[0] = false;
   prime[1] = false;
   for (int i = 2; i * i <= n; i++)
   {
      if(prime[i]==true)
      {
         for(int j = i * i; j < n; j += i)
            prime[j] = false;
      }
    }

/* In order to calculate the sum of the digits*/
for (int i = 2; i < n; i++)
{
     int sum = 0;
     //logic to count all the ultra primes
     if(prime[i]==true)
     {
       int val=i;
       while (val>0)
       {
         int rem = val % 10;
         sum += rem;
         val=val/10;
       }
     }
     //mark all the ultra primes
    if(prime[sum])
        dp[i] = 1;
    else
        dp[i] = 0;
}

//now we will use prefix sum method to calculate the number of ultra primes
    for(int i = 3; i < n; i++)
        dp[i]=dp[i - 1]+dp[i];
}

/* Function to precompute all ultraprime numbers*/

int main()
{
    int t;
    cin>>t;
    sieve();
    while(t--)
    {
      int l, r;
      cin>>l>>r;
      cout<<dp[r]-dp[l - 1]<<"\n";
    }
    return 0;
}
