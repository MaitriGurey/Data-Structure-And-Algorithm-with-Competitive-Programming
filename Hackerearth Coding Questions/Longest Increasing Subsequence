//THIS QUESTION IS DONE IN BEST TIME COMPLEXITY OF O(NLOGN) USING BINARY SEARCH
//LONGEST INCREASING SUBSEQUENCE
//PROBLEM STATEMENT-
Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].
Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

SOURCE CODE-
class Solution {
public:
    int ceilindex(int arr[],int low,int high,int key){
        while(low<high)
        {
            int mid=low+(high-low)/2;
            if(arr[mid]>=key)
                high=mid;
            else
                low=mid+1;
        }
        return high;
    }
    int lengthOfLIS(vector<int>& nums) {
       int n=nums.size();
        int tail[n];
        int len=1;
        tail[0]=nums[0];
        for(int i=1;i<n;i++)
        {
            if(nums[i]>tail[len-1])
            {
                tail[len]=nums[i];
                len++;
            }
            else
            {
                int res=ceilindex(tail,0,len-1,nums[i]);
                tail[res]=nums[i];
            }
        }
        return len;
    }
};
